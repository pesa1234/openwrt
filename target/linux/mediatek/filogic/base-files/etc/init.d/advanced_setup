#!/bin/sh /etc/rc.common

START=99


smp-mt76() {
OPTIMIZED_FOR="$1"
CPU_LIST=`cat /proc/interrupts | sed -n '1p'`
NUM_OF_CPU=0; for i in $CPU_LIST; do NUM_OF_CPU=`expr $NUM_OF_CPU + 1`; done;
DEFAULT_RPS=0

. /lib/functions.sh

RPS_IF_LIST=""
NUM_WIFI_CARD=0
WIFI_RADIO1=0
WIFI_RADIO2=0
WIFI_RADIO3=0
WED_ENABLE=0

WIFI_MODULE_LIST='mt7915e mt7996e'

get_if_info()
{
	# try to get all wifi and eth net interface.
	logger -s "smp_affinity: try to get all wifi and eth net interface."
	NET_IF_LIST=`ls /sys/class/net`
	for vif in $NET_IF_LIST;
	do
		if [[ "$vif" == "eth"* ]] ||  \
		[[ "$vif" == "lan"* ]] || [[ "$vif" == "wan"* ]] || \
		[[ "$vif" == "wlan"* ]] || [[ "$vif" == "phy"* ]]; then
			RPS_IF_LIST="$RPS_IF_LIST $vif"
		fi
	done;
	logger -s "smp_affinity: RPS_IF_LIST = $RPS_IF_LIST"

	# try to get wifi physical card num.
	logger -s "smp_affinity: try to get wifi physical card num."
	VIRTUAL_RADIO_LIST=`ls -l /sys/class/ieee80211/ | awk -F 'devices' '{print $2}' | awk -F 'phy' '{print $1}' | uniq`
	for v in $VIRTUAL_RADIO_LIST;
	do
		NUM_WIFI_CARD=`expr $NUM_WIFI_CARD + 1`
		logger -s "smp_affinity: physical raido $v"
		if [[ $v == *"wmac"* ]]; then
			WIFI_RADIO1=1
		fi

		if [[ $v == *"wbsys"* ]]; then
			WIFI_RADIO1=1
		fi

		if [[ $v == *"pci0000"* ]]; then
			WIFI_RADIO2=1
		fi

		if [[ $v == *"pci0001"* ]]; then
			WIFI_RADIO3=1
		fi
	done;


	for v in $WIFI_MODULE_LIST;
	do
		if [[ -f "/sys/module/$v/parameters/wed_enable" ]]; then
			WED_ENABLE_LIST=`cat /sys/module/$v/parameters/wed_enable`
			logger -s "smp_affinity: wed enable ori info $v $WED_ENABLE_LIST"
			if [[ $WED_ENABLE_LIST == "Y" ]]; then
				WED_ENABLE=1
			fi
		fi
	done;
	logger -s "smp_affinity: NUM_WIFI_CARD = $NUM_WIFI_CARD"
	logger -s "smp_affinity: platform wifi enable = $WIFI_RADIO1"
	logger -s "smp_affinity: pcie1 wifi enable = $WIFI_RADIO2"
	logger -s "smp_affinity: pcie2 wifi enable = $WIFI_RADIO3"
	logger -s "smp_affinity: WED enable = $WED_ENABLE"
}

# $1: CPU#
# $2: irq list for added.
CPU_AFFINITY_ADD()
{
	eval oval=\$CPU${1}_AFFINITY
	eval CPU${1}_AFFINITY=\"\$CPU${1}_AFFINITY $2\"
}

# $1: CPU#
# $2: Interface name for added.
CPU_RPS_ADD()
{
	eval oval=\$CPU${1}_RPS
	eval CPU${1}_RPS=\"\$CPU${1}_RPS $2\"
	logger -s "smp_affinity: CPU${1}_RPS=\"\$CPU${1}_RPS $2\""
}

MT7988()
{
	num_of_wifi=$1
	DEFAULT_RPS=0

	#Physical IRQ# setting
	#Ethernet RSS feature enables 4 Rx rings
	eth_irq_rx0=221
	eth_irq_rx1=222
	eth_irq_rx2=223
	eth_irq_rx3=224
	eth_irq_tx=229
	wifi1_irq_pcie0=524288
	wifi1_irq_pcie1=134742016
	wifi2_irq_pcie0=
	wifi2_irq_pcie1=

	if [[ "$WED_ENABLE" -eq "1" ]]; then
		logger -s "smp_affinity: WED_ENABLE ON irq/iptable setting"
		#TCP Binding
		iptables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		#UDP Binding
		iptables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		#Multicast skip Binding
		iptables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		iptables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT

	else
		logger -s "smp_affinity: WED_ENABLE OFF irq/iptable seting"
	fi

	for vif in $NET_IF_LIST;
	do
		if [[ "$vif" == "wlan"* ]] || [[ "$vif" == "phy"* ]]; then
			WIFI_IF_LIST="$WIFI_IF_LIST $vif"
		fi
	done;
	logger -s "smp_affinity: $WIFI_IF_LIST = $WIFI_IF_LIST"
	# Please update the CPU binding in each cases.
	# CPU#_AFFINITY="add binding irq number here"
	# CPU#_RPS="add binding interface name here"
	if [ "$num_of_wifi" = "0" ]; then
		CPU0_AFFINITY="$eth_irq_rx0 $eth_irq_tx"
		CPU1_AFFINITY="$eth_irq_rx1"
		CPU2_AFFINITY="$eth_irq_rx2"
		CPU3_AFFINITY="$eth_irq_rx3"

		CPU0_RPS="$RPS_IF_LIST"
		CPU1_RPS="$RPS_IF_LIST"
		CPU2_RPS="$RPS_IF_LIST"
		CPU3_RPS="$RPS_IF_LIST"
	else
		#we bound all wifi card to cpu0 and bound eth to cpu
		CPU0_AFFINITY=""
		CPU1_AFFINITY=""
		CPU2_AFFINITY="$eth_irq_rx0 $eth_irq_rx1 $eth_irq_tx"
		CPU3_AFFINITY="$eth_irq_rx2 $eth_irq_rx3"

		CPU0_RPS="$WIFI_IF_LIST"
		CPU1_RPS="$WIFI_IF_LIST"
		CPU2_RPS=""
		CPU3_RPS=""
	fi
	logger -s "smp_affinity: CPU0_AFFINITY = $CPU0_AFFINITY"
	logger -s "smp_affinity: CPU1_AFFINITY = $CPU1_AFFINITY"
	logger -s "smp_affinity: CPU2_AFFINITY = $CPU2_AFFINITY"
	logger -s "smp_affinity: CPU3_AFFINITY = $CPU3_AFFINITY"
}

MT7986()
{
	num_of_wifi=$1
	DEFAULT_RPS=0

	#Physical IRQ# setting
	#Ethernet RSS feature enables 4 Rx rings
	eth_irq_rx0=221
	eth_irq_rx1=222
	eth_irq_rx2=223
	eth_irq_rx3=224
	eth_irq_tx=229
	wifi1_irq=
	wifi2_irq=
	wifi3_irq=

	if [[ "$WED_ENABLE" -eq "1" ]]; then
		logger -s "smp_affinity: WED_ENABLE ON irq/iptable setting"
		#TCP Binding
		iptables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		#UDP Binding
		iptables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		#Multicast skip Binding
		iptables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		iptables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT

		#AX6000 AX7800 - SOC
		if [[ "$WIFI_RADIO1" -eq "1" ]]; then
			wifi1_irq=238
		fi
		#AX7800 - PCIE0
		if [[ "$WIFI_RADIO2" -eq "1" ]]; then
			wifi2_irq=237
		fi
		#AX7800 - PCIE1
		#if [[ "$WIFI_RADIO3" -eq "1" ]]; then
		#	wifi3_irq=239
		#fi
	else
		logger -s "smp_affinity: WED_ENABLE OFF irq/iptable setting"
		#AX6000 AX7800 - SOC
		if [[ "$WIFI_RADIO1" -eq "1" ]]; then
			wifi1_irq=245
		fi
		#AX7800 - PCIE0
		if [[ "$WIFI_RADIO2" -eq "1" ]]; then
			wifi2_irq=246
		fi
		#AX7800 - PCIE1
		#if [[ "$WIFI_RADIO3" -eq "1" ]]; then
		#	wifi3_irq=247
		#fi
	fi

	for vif in $NET_IF_LIST;
	do
		if [[ "$vif" == "wlan"* ]] || [[ "$vif" == "phy"* ]]; then
			WIFI_IF_LIST="$WIFI_IF_LIST $vif"
		fi
	done;
	logger -s "smp_affinity: $WIFI_IF_LIST = $WIFI_IF_LIST"
	# Please update the CPU binding in each cases.
	# CPU#_AFFINITY="add binding irq number here"
	# CPU#_RPS="add binding interface name here"
	if [ "$num_of_wifi" = "0" ]; then
		CPU0_AFFINITY="$eth_irq_rx0"
		CPU1_AFFINITY="$eth_irq_rx1 $eth_irq_tx"
		CPU2_AFFINITY="$eth_irq_rx2"
		CPU3_AFFINITY="$eth_irq_rx3"

		CPU0_RPS=""
		CPU1_RPS=""
		CPU2_RPS=""
		CPU3_RPS=""
	else
		#we bound all wifi card to cpu1 and bound eth to cpu0
		CPU0_AFFINITY="$eth_irq_rx0"
		CPU1_AFFINITY="$eth_irq_rx1 $eth_irq_tx"
		CPU2_AFFINITY="$eth_irq_rx2 $wifi2_irq $wifi3_irq"
		CPU3_AFFINITY="$eth_irq_rx3 $wifi1_irq"

		CPU0_RPS="$WIFI_IF_LIST"
		CPU1_RPS="$WIFI_IF_LIST"
		CPU2_RPS="$WIFI_IF_LIST"
		CPU3_RPS="$WIFI_IF_LIST"
	fi
	logger -s "smp_affinity: CPU0_AFFINITY = $CPU0_AFFINITY"
	logger -s "smp_affinity: CPU1_AFFINITY = $CPU1_AFFINITY"
	logger -s "smp_affinity: CPU2_AFFINITY = $CPU2_AFFINITY"
	logger -s "smp_affinity: CPU3_AFFINITY = $CPU3_AFFINITY"
}

gl-mt6000()
{
	num_of_wifi=$1
	DEFAULT_RPS=0

	#Physical IRQ# setting
	#Ethernet RSS feature enables 4 Rx rings
	eth_irq_rx0=221
	eth_irq_rx1=222
	eth_irq_rx2=223
	eth_irq_rx3=224
	eth_irq_tx=229
	
	
	if [[ "$WED_ENABLE" -eq "1" ]]; then
		wifi1_irq=237
	else
		wifi1_irq=245
	fi

	for vif in $NET_IF_LIST;
	do
		if [[ "$vif" == "wlan"* ]] || [[ "$vif" == "phy"* ]]; then
			WIFI_IF_LIST="$WIFI_IF_LIST $vif"
		fi
	done;
	logger -s "smp_affinity: $WIFI_IF_LIST = $WIFI_IF_LIST"
	# Please update the CPU binding in each cases.
	# CPU#_AFFINITY="add binding irq number here"
	# CPU#_RPS="add binding interface name here"
	if [ "$num_of_wifi" = "0" ]; then
		CPU0_AFFINITY="$eth_irq_rx0"
		CPU1_AFFINITY="$eth_irq_rx1 $eth_irq_tx"
		CPU2_AFFINITY="$eth_irq_rx2"
		CPU3_AFFINITY="$eth_irq_rx3"

		CPU0_RPS=""
		CPU1_RPS=""
		CPU2_RPS=""
		CPU3_RPS=""
	else
		#we bound all wifi card to cpu1 and bound eth to cpu0
		CPU0_AFFINITY="$eth_irq_rx0"
		CPU1_AFFINITY="$eth_irq_rx1 $eth_irq_tx"
		CPU2_AFFINITY="$eth_irq_rx2 $wifi2_irq $wifi3_irq"
		CPU3_AFFINITY="$eth_irq_rx3 $wifi1_irq"
		
		CPU0_RPS="$WIFI_IF_LIST"
		CPU1_RPS="$WIFI_IF_LIST"
		CPU2_RPS="$WIFI_IF_LIST"
		CPU3_RPS="$WIFI_IF_LIST"
	fi
	logger -s "smp_affinity: CPU0_AFFINITY = $CPU0_AFFINITY"
	logger -s "smp_affinity: CPU1_AFFINITY = $CPU1_AFFINITY"
	logger -s "smp_affinity: CPU2_AFFINITY = $CPU2_AFFINITY"
	logger -s "smp_affinity: CPU3_AFFINITY = $CPU3_AFFINITY"
}

MT7981()
{
	num_of_wifi=$1
	DEFAULT_RPS=0

	#Physical IRQ# setting
	eth_irq_rx=221
	eth_irq_tx=229
	wifi1_irq=
	wifi2_irq=
	wifi3_irq=

	#AX3000
	if [[ "$WED_ENABLE" -eq "1" ]]; then
		logger -s "smp_affinity: WED_ENABLE ON irq/iptable setting"
		#TCP Binding
		iptables -D FORWARD -p tcp -m conntrack --ctstate	\
				RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p tcp -m conntrack --ctstate	\
				RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p tcp -m conntrack --ctstate	\
				RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p tcp -m conntrack --ctstate	\
				RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
		#UDP Binding
		iptables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		iptables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -D FORWARD -p udp -j FLOWOFFLOAD --hw
		ip6tables -I FORWARD -p udp -j FLOWOFFLOAD --hw
		#Multicast skip Binding
		iptables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		iptables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
		ip6tables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT

		if [[ "$WIFI_RADIO1" -eq "1" ]]; then
			wifi1_irq=237
		fi
	else
		if [[ "$WIFI_RADIO1" -eq "1" ]]; then
			wifi1_irq=245
		fi
	fi

	# Please update the CPU binding in each cases.
	# CPU#_AFFINITY="add binding irq number here"
	# CPU#_RPS="add binding interface name here"
	if [ "$num_of_wifi" = "0" ]; then
		CPU0_AFFINITY="$eth_irq_rx"
		CPU1_AFFINITY="$eth_irq_tx"

		CPU0_RPS="$RPS_IF_LIST"
		CPU1_RPS="$RPS_IF_LIST"
	else
		#we bound all wifi card to cpu0 and bound eth to cpu1
		CPU0_AFFINITY="$wifi1_irq $wifi2_irq $wifi3_irq"
		CPU1_AFFINITY="$eth_irq_rx $eth_irq_tx"

		CPU0_RPS="$RPS_IF_LIST"
		CPU1_RPS="$RPS_IF_LIST"
	fi
	logger -s "smp_affinity: CPU0_AFFINITY = $CPU0_AFFINITY"
	logger -s "smp_affinity: CPU1_AFFINITY = $CPU1_AFFINITY"
}

MT7622()
{
	num_of_wifi=$1
	DEFAULT_RPS=0

	#Physical IRQ# setting
	eth0_irq=224
	eth1_irq=225
	wifi1_irq=
	wifi2_irq=
	wifi3_irq=
	#AX1200 AX3200
	if [[ "$WIFI_RADIO1" -eq "1" ]]; then
		wifi1_irq=211
	fi
	#AX1800 AX3200
	if [[ "$WIFI_RADIO2" -eq "1" ]]; then
		wifi2_irq=214
	fi
	#AX3600
	if [[ "$WIFI_RADIO3" -eq "1" ]]; then
		wifi3_irq=215
	fi

	# Please update the CPU binding in each cases.
	# CPU#_AFFINITY="add binding irq number here"
	# CPU#_RPS="add binding interface name here"
	if [ "$num_of_wifi" == "0" ]; then
		CPU0_AFFINITY="$eth0_irq"
		CPU1_AFFINITY="$eth1_irq"

		CPU0_RPS="$RPS_IF_LIST"
		CPU1_RPS="$RPS_IF_LIST"
	else
		#we bound all wifi card to cpu0 and bound eth to cpu1
		CPU0_AFFINITY="$wifi1_irq $wifi2_irq $wifi3_irq"
		CPU1_AFFINITY="$eth0_irq $eth1_irq"

		CPU0_RPS="$RPS_IF_LIST"
		CPU1_RPS="$RPS_IF_LIST"
	fi

	logger -s "smp_affinity: CPU0_AFFINITY = $CPU0_AFFINITY"
	logger -s "smp_affinity: CPU1_AFFINITY = $CPU1_AFFINITY"
}

setup_model()
{
	board=$(board_name)
	num_of_wifi=$NUM_WIFI_CARD

	if [[ $board == *"7988"* ]]; then
		logger -s "smp_affinity: setup_model: MT7988 NUM_WIFI_CARD=$num_of_wifi"
		MT7988 $num_of_wifi
	elif [[ $board == *"7986"* ]]; then
		logger -s "smp_affinity: setup_model: MT7986 NUM_WIFI_CARD=$num_of_wifi"
		MT7986 $num_of_wifi
	elif [[ $board == *"gl-mt6000"* ]]; then
		logger -s "smp_affinity: setup_model: gl-mt6000 NUM_WIFI_CARD=$num_of_wifi"
		gl-mt6000 $num_of_wifi
	elif [[ $board == *"7981"* ]]; then
		logger -s "smp_affinity: setup_model: MT7981 NUM_WIFI_CARD=$num_of_wifi"
		MT7981 $num_of_wifi
	elif [[ $board == *"7622"* ]]; then
		logger -s "smp_affinity: setup_model: MT7622 NUM_WIFI_CARD=$num_of_wifi"
		MT7622 $num_of_wifi
	elif [[ $board == *"bpi-r4"* ]]; then
		logger -s "smp_affinity: setup_model: bpi-r4 NUM_WIFI_CARD=$num_of_wifi"
		MT7988 $num_of_wifi
	fi
}

get_virtual_irq()
{
	PHY_POS=`expr $NUM_OF_CPU + 3` #physical irq # position in /proc/interrups may vary with the number of CPU up
	target_phy_irq=$1
	cat /proc/interrupts | sed 's/:/ /g'| awk '$1 ~ /^[0-9]+$/' | while read line
	do
		set -- $line
		phy_irq=$(eval "echo \$$PHY_POS")
		if [ $phy_irq == $target_phy_irq ]; then
			echo $1
			return
		fi
	done
}

set_rps_cpu_bitmap()
{
	logger -s "smp_affinity: # Scan binding interfaces of each cpu"
	# suppose the value of interface_var is null or hex
	num=0
	while [ "$num" -lt "$NUM_OF_CPU" ];do
		cpu_bit=$((2 ** $num))
		eval rps_list=\$CPU${num}_RPS
		logger -s "smp_affinity: # CPU$num: rps_list=$rps_list"
		for i in $rps_list; do
			var=${VAR_PREFIX}_${i//'-'/_}
			var=${var//'.'/_}
			eval ifval=\$$var
			logger -s "smp_affinity: [var val before] \$$var=$ifval"
			if [ -z "$ifval" ]; then
				eval $var=$cpu_bit
			else
				eval $var=`expr $ifval + $cpu_bit`
			fi
			eval ifval=\$$var
			logger -s "smp_affinity: [rps val after]$i=$ifval"
		done
		num=`expr $num + 1`
	done
}

# $1: The default rps value. If rps of the interface is not setup, set $1 to it
set_rps_cpus()
{
	logger -s "smp_affinity: # Setup rps of the interfaces, $RPS_IF_LIST."
	for i in $RPS_IF_LIST; do
		var=${VAR_PREFIX}_${i//'-'/_}
		var=${var//'.'/_}
		eval cpu_map=\$$var
		if [ -d /sys/class/net/$i ]; then
			if [ ! -z $cpu_map ]; then
				cpu_map=`printf '%x' $cpu_map`
				logger -s "smp_affinity: echo $cpu_map > /sys/class/net/$i/queues/rx-0/rps_cpus"
				echo $cpu_map > /sys/class/net/$i/queues/rx-0/rps_cpus
			elif [ ! -z $1 ]; then
				logger -s "smp_affinity: echo $1 > /sys/class/net/$i/queues/rx-0/rps_cpus"
				echo $1 > /sys/class/net/$i/queues/rx-0/rps_cpus
			fi
		fi
	done
}

set_smp_affinity()
{
	logger -s "smp_affinity: # Setup affinity of each physical irq."
	num=0
	while [ "$num" -lt "$NUM_OF_CPU" ];do
		eval smp_list=\$CPU${num}_AFFINITY
		for i in $smp_list; do
			cpu_bit=$((2 ** $num))
			virq=$(get_virtual_irq $i)
			#virq=$i
			logger -s "smp_affinity: irq p2v $i --> $virq"
			if [ ! -z $virq ]; then
				#logger -s "smp_affinity: echo $cpu_bit > /proc/irq/$virq/smp_affinity"
				echo $cpu_bit > /proc/irq/$virq/smp_affinity
			fi
		done
		num=`expr $num + 1`
	done
}


logger -s "smp_affinity: # RPS and AFFINITY Setting"
logger -s "smp_affinity: # NUM_OF_CPU=$NUM_OF_CPU"
VAR_PREFIX="autogen"
get_if_info
setup_model
rps_setting=$(uci get network.globals.packet_steering)
if [ "$rps_setting" = "0" ]; then
	set_rps_cpu_bitmap
	set_rps_cpus $DEFAULT_RPS
else
	logger -s "smp_affinity: # RPS done by packet steering script"
fi
set_smp_affinity
#end of file
}

mtk-offloading()
{
	mtk_offloading_enable=$(uci get advanced.@defaults[0].mtk_offloading_enable)
	if [ "$mtk_offloading_enable" == "1" ]; then
			logger -s "smp_affinity: Enabling mtk offloading"
			#TCP Binding
			iptables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
			ip6tables -I FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
			#UDP Binding
			iptables -I FORWARD -p udp -j FLOWOFFLOAD --hw
			ip6tables -I FORWARD -p udp -j FLOWOFFLOAD --hw
			#Multicast skip Binding
			iptables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT
			ip6tables -I FORWARD -m pkttype --pkt-type multicast -j ACCEPT
	elif [ "$mtk_offloading_enable" == 0 ]; then
			logger -s "smp_affinity: Disabling mtk offloading"
			#TCP Binding
			iptables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
			ip6tables -D FORWARD -p tcp -m conntrack --ctstate RELATED,ESTABLISHED -j FLOWOFFLOAD --hw
			#UDP Binding
			iptables -D FORWARD -p udp -j FLOWOFFLOAD --hw
			ip6tables -D FORWARD -p udp -j FLOWOFFLOAD --hw
			#Multicast skip Binding
			iptables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
			ip6tables -D FORWARD -m pkttype --pkt-type multicast -j ACCEPT
	fi
}

hw-atf-setup()
{
	FILE="/sys/kernel/debug/ieee80211/phy0/mt76/vow"
	if [ -e "$FILE" ]; then
		logger -s "smp_affinity: HW-ATF available"
		atf=$(uci get advanced.@defaults[0].atf_enable)
		hwatf=$(uci get advanced.@defaults[0].hw_atf_enable)
		if [ $atf == 1 ]; then
			echo 'vow_atf_en=1' > /sys/kernel/debug/ieee80211/phy0/mt76/vow
		elif [ $atf == 0 ]; then
			echo 'vow_atf_en=0' > /sys/kernel/debug/ieee80211/phy0/mt76/vow
		fi
		
		if [ $hwatf == 1 ]; then
			echo 'vow_watf_en=1' > /sys/kernel/debug/ieee80211/phy0/mt76/vow
		elif [ $hwatf == 0 ]; then
			echo 'vow_watf_en=0' > /sys/kernel/debug/ieee80211/phy0/mt76/vow
		fi
		logger -t adv-log "HW-ATF Settings:"
		echo 'show_vow_info' > /sys/kernel/debug/ieee80211/phy0/mt76/vow	
	fi
}

enable-HQoS()
{
	FILE="/sbin/mtkhnat"
	if [ -e "$FILE" ]; then
		mtkutil_enable=$(uci get mtkhnat.global.enable)
		hqos_enable=$(uci get mtkhnat.global.hqos)
		if [ $mtkutil_enable == 1 ]; then
			if [ $hqos_enable == 1 ]; then
				/sbin/mtkhnat
				logger -s "smp_affinity: mtkhnat_util is enabled and active"
			fi
		fi
	fi
	
}

usb-setup()
{
	usb2=$(uci get advanced.@defaults[0].usb_2)
	if [ $usb2 == 1 ]; then
		logger -t adv-log "USB Speed set to 2.0"
		echo 1 > /sys/bus/usb/devices/usb2/2-0:1.0/usb2-port1/disable
	elif [ $usb2 == 0 ]; then
		logger -t adv-log "USB Speed set to 3.0"
		echo 0 > /sys/bus/usb/devices/usb2/2-0:1.0/usb2-port1/disable
	fi
	
}

start() {
	smp-mt76
	enable-HQoS
	usb-setup
	hw-atf-setup
	#mtk-offloading #### do not run - hardware flow offloading and bridger works better
}
